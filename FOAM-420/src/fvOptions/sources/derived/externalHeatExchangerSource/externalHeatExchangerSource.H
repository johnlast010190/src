/*---------------------------------------------------------------------------*\
|       o        |
|    o     o     |  FOAM (R) : Open-source CFD for Enterprise
|   o   O   o    |  Version : 4.2.0
|    o     o     |  ESI Ltd. <http://esi.com/>
|       o        |
\*---------------------------------------------------------------------------
License
    This file is part of FOAMcore.
    FOAMcore is based on OpenFOAM (R) <http://www.openfoam.org/>.

    FOAMcore is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    FOAMcore is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with FOAMcore.  If not, see <http://www.gnu.org/licenses/>.

Copyright
    (c) 2010-2019 Esi Ltd.

Class
    Foam::fv::externalHeatExchangerSource

Group
    grpFvOptionsSources

Description
    Heat exchanger interface.
    The heat exchanger is defined as a selection of tubes (cell Zone).
    The heat rejected Qr [W/m3] is obtained executing an external model
    fed on mass flow rates and temperatures from the CFD at specific locations.
    A text file with heat rejected in [W/m3] for a set of point  is generated by
    the external model and values read and mapped back to the CFD.

Note
- inlet and outlet tube faceSets and a coordinate system aligned with
  tubes must be provided to automatically generate zones.
- The heat exchanger coordinate system needs to be oriented in the
  following way: e1 tube width and e2 flow direction.
- path for the external application and matlab runtime libraries needs
  to be specified to exectute the system call.

Usage

HE_name
{
    type            externalHeatExchangerSource;
    active          true;
    hookOp          solve;
    externalHeatExchangerSourceCoeffs
    {
        coordinateSystem
        {
            type        cartesian;
            origin      (0.0 0.0 0.0);

            coordinateRotation
            {
                type        axesRotation;
                e1          (1 0 0); // width
                e2          (0 1 0); // flow
            }
        }
        rowsNumber       6;
        selectionMode   cellZone;
        cellZone        MFP_turn;
        fieldNames      ( T );
        tubeInletFaceZone MFP_inlet;
        tubeOutletFaceZone MFP_outlet;
        appPath "/home/user/application/HeatExchanger.sh";
        mathPath "/home/user/Matlab/v92";
    }
}

SourceFiles
    externalHeatExchangerSource.C

\*---------------------------------------------------------------------------*/
#ifndef externalHeatExchangerSource_H
#define externalHeatExchangerSource_H

#include "cellSetOption/cellSetOption.H"
#include "coordinate/systems/coordinateSystem.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{
namespace fv
{

/*---------------------------------------------------------------------------*\
              Class externalHeatExchangerSource Declaration
\*---------------------------------------------------------------------------*/

class externalHeatExchangerSource
:
    public cellSetOption
{

protected:

        //- Name of temperature field; default = T
        word TName_;

        //- Name of the flux
        word phiName_;

        //- Number of rows
        label nRows_;

        //- Number of tubes per rows
        label nCol_;

        //- Name of the faceZone at the he tube inlet
        word inletZoneName_;

        //- Name of the faceZone at the he tube outlet
        word outletZoneName_;

        //- inlet faceZone ID
        label inletID_;

        //- outlet faceZone ID
        label outletID_;

        label solutionFrequency_;

        bool firstIter_;

        // linearised source term
        Switch linearised_;

        // name of the file generated by the he model
        fileName fName_;

        // external application path
        fileName appPath_;

        // Matlab Runtime path
        fileName mathPath_;

        // inputs
        scalar pCB_;
        label  passes_;
        scalar pCC_;
        scalar chargePressure_;
        scalar pFA_;
        scalar pFB_;
        scalar pFC_;
        scalar ambientTemperature_;
        word pCA_;
        scalar returnWidth_;
        scalar pAA_;
        scalar pAB_;
        scalar pAC_;
        scalar pAD_;

        //- Heat exchanger coordinate system
        //- alligned with the heat exchanger pipes
        //- e1 = pipes width
        //- e2 = pipes flow direction
        //- e3 = pipes height
        autoPtr<coordinateSystem> coordSysPtr_;

        // list containing sorted origins
        // in global coordinate system x y z
        List<point> originTubes_;

        // list containing sorted tubes
        List<labelList > sortedTubes_;

        // list storing monitoring faces
        // of each tube
        List<labelList > monitorTubes_;

        // list storing length of each tube
        scalarList lengthTubes_;

        // list storing width of each tube
        scalarList widthTubes_;

        // heat rejected [W/m3]
        autoPtr<volScalarField> Qhr_;

private:

        //- zone boundary faces
        //  used for cellZones and tubes
        labelList zoneBoundaryFaces(const labelList& regionCells);

        //- initialisation (regionSplit etc)
        void heConstruction();

        //- return tube local coord system
        //  in the global coord x y z
        point tubeOPoint(const labelList& tubeCells);

        //- bubble sort algorith used to order tubes
        //  in rows and columns
        void bSortTubes
        (
            List<labelList>& unsortedTubes_,
            List<point>& originPoints,
            label dir,
            label iStart,
            label iEnd
        );

        // return vector storing tube length and width
        scalarList calcTubeDim(const labelList& tubeCells);

        // return density field
        tmp<volScalarField> getRho() const;

        //- return a vector storing mass flux and
        //  and flux averaged temperature
        scalarList tubeMFluxTemp(const fvMesh& mesh, const labelList& faces);

        // return the fin density
        scalar finDensity(label rowIndex);

        // read csvHR.dat generated by HE model
        void readHRfile(pointField& rowPoints, scalarField& rowHR);

        //- Waits for file to reach specified state
        void fileState(const fileName& f, bool exists) const;

        // // get the heat rejected for a row, map and store in Qhr
        void mapRowHR
        (
            label firstTube,
            label lastTube,
            point csPoint,
            pointField& rowPoints,
            scalarField& rowHR
        );



public:

    //- Runtime type information
    TypeName("externalHeatExchangerSource");


    // Constructors

        //- Construct from components
        externalHeatExchangerSource
        (
            const word& name,
            const word& modelType,
            const dictionary& dict,
            const objectRegistry& obr
        );


    //- Destructor
    virtual ~externalHeatExchangerSource()
    {}


    // Member Functions

        //- Initialise after all fvOptions created
        virtual bool initialise() override;


        // Explicit and implicit source for ico equation

            //- Scalar
            virtual void addSup
            (
                fvMatrix<scalar>& eqn,
                const label fieldi
            ) override;


        // Explicit and implicit source for compressible equation

            //- Scalar
            virtual void addSup
            (
                const volScalarField& rho,
                fvMatrix<scalar>& eqn,
                const label fieldi
            ) override;


        // IO

            //- Read dictionary
            virtual bool read(const dictionary& dict) override;

        // Execute the system call to the HE model
            virtual void correct() override;

};

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace fv
} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
