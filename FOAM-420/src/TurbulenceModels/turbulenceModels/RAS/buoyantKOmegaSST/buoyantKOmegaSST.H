/*---------------------------------------------------------------------------*\
|       o        |
|    o     o     |  FOAM® : Professional Open-source CFD
|   o   O   o    |  Version : 4.2.0
|    o     o     |  Copyright © 2019 ESI Ltd. <http://esi.com/>
|       o        |
\*---------------------------------------------------------------------------
License
    This file is part of FOAMcore.
    FOAMcore is based on OpenFOAM® <http://www.openfoam.org/>.

    FOAMcore is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    FOAMcore is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with FOAMcore.  If not, see <http://www.gnu.org/licenses/>.

Portions Copyright © 2014-2015 OpenFOAM Foundation.

Author
    2018. Lisandro Maders (Esi Ltd.). All rights reserved.

Class
    Foam::RASModels::buoyantKOmegaSST

Group
    grpRASTurbulence

Description
    Additional buoyancy generation/dissipation term applied to the
    k and omega equations of the standard k-omega model.

    This implementation is based on the density rather than temperature gradient
    extending the applicability to systems in which the density gradient may be
    generated by variation of composition rather than temperature.  Further, the
    1/Prt coefficient is replaced by Cg to provide more general control of
    model.

    Pkb=-nut*Cg*g*grad(rho)
    Pbo=omega/k*[(1+alpha)*C1o*max(Pbk,0)*f_angle-C1o*Pbk]

    The default model coefficients are
    \verbatim
        buoyantKOmegaSSTCoeffs
        {
            dissipation     false;
            Cg              1.1765; //1/0.85
            C01             1;
            C02             1;
        }
    \endverbatim

See also
    Foam::RASModels::KomegaSST

SourceFiles
    buoyantKOmegaSST.C

\*---------------------------------------------------------------------------*/

#ifndef buoyantKOmegaSST_H
#define buoyantKOmegaSST_H

#include "RAS/kOmegaSST/kOmegaSST.H"
#include "RAS/RASModel/RASModel.H"
#include "eddyViscosity/eddyViscosity.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{
namespace RASModels
{

/*---------------------------------------------------------------------------*\
                           Class buoyantKOmegaSST Declaration
\*---------------------------------------------------------------------------*/

template<class BasicTurbulenceModel>
class buoyantKOmegaSST
:
    public kOmegaSST<BasicTurbulenceModel>
{
    // Private Member Functions

        // Disallow default bitwise copy construct and assignment
        buoyantKOmegaSST(const buoyantKOmegaSST&);
        void operator=(const buoyantKOmegaSST&);


protected:

    // Protected data

        // Model coefficients

        dimensionedScalar Cg_;
        dimensionedScalar C1o_;
        dimensionedScalar C2o_;

        volScalarField Gb_;
        bool compressible_;

        Switch diss_;

    // Protected Member Functions

        tmp<volScalarField> Gcoef() const;

        virtual tmp<fvScalarMatrix> kSource() const;
        virtual tmp<fvScalarMatrix> omegaSource() const;


public:

    typedef typename BasicTurbulenceModel::alphaField alphaField;
    typedef typename BasicTurbulenceModel::rhoField rhoField;
    typedef typename BasicTurbulenceModel::transportModel transportModel;


    //- Runtime type information
    TypeName("buoyantKOmegaSST");


    // Constructors

        //- Construct from components
        buoyantKOmegaSST
        (
            const alphaField& alpha,
            const rhoField& rho,
            const volVectorField& U,
            const surfaceScalarField& alphaRhoPhi,
            const surfaceScalarField& phi,
            const transportModel& transport,
            const word& propertiesName = turbulenceModel::propertiesName,
            const word& type = typeName
        );


    //- Destructor
    virtual ~buoyantKOmegaSST()
    {}


    // Member Functions

        //- Re-read model coefficients if they have changed
        virtual bool read();
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace RASModels
} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
    #include "buoyantKOmegaSST.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
