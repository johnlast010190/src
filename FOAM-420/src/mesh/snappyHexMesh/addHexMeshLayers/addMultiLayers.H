/*---------------------------------------------------------------------------*\
|       o        |
|    o     o     |  FOAM® : Professional Open-source CFD
|   o   O   o    |  Version : 4.2.0
|    o     o     |  Copyright © 2016 ESI Ltd. <http://esi.com/>
|       o        |
\*---------------------------------------------------------------------------

License
    This file is part of FOAMcore.
    FOAMcore is based on OpenFOAM® <http://www.openfoam.org/>.

    FOAMcore is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    FOAMcore is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with FOAMcore.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

#ifndef addMultiLayers_H
#define addMultiLayers_H

#include "meshRefinement/meshRefinement.H"
#include "snappyHexMeshDriver/layerParameters/layerParameters.H"
#include "meshControl/meshControl.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

// Forward declaration of classes
class polyMesh;

/*---------------------------------------------------------------------------*\
                           Class addMultiLayers Declaration
\*---------------------------------------------------------------------------*/

class addMultiLayers
{
    // Private data

        //- Mesh control settings
        const meshControl& controller_;

        //- From surface region to patch
        const labelList& globalToMasterPatch_;

        //- refinement parameters
        const refinementParameters& refineParams_;

        //- Layer characteristics
        const layerParameters& layerParams_;

        //- grown up tri-surfaces to project onto
        const dictionary& grownUpGeometryDict_;

        //- grown up tri-surfaces to project onto
        const dictionary& grownUpZoneGeometryDict_;

        //- Reference to decomposition method
        decompositionMethod& decomposer_;

        //- Reference to mesh distribution engine
        fvMeshDistribute& distributor_;

        //- Mesh+surface
        meshRefinement& meshRefiner_;

public:

    //- Runtime type information
    ClassName("addMultiLayers");

    // Constructors

        //- Construct from mesh.
        addMultiLayers
        (
            const meshControl& controller,
            const labelList& globalToMasterPatch,
            const refinementParameters& refineParams,
            const layerParameters& layerParams,
            const dictionary& grownUpGeometryDict,
            const dictionary& grownUpZoneGeometryDict,
            decompositionMethod& decomposer,
            fvMeshDistribute& distributor,
            meshRefinement& meshRefiner
        );

    // Member Functions

        labelList calculateLayers
        (
            const labelList& layerPatchIDs,
            volScalarField& targetLayers,
            volScalarField& layerCount,
            volScalarField& actualLayers
        );

        //- Check for collapsed points for extrude layer addition
        void checkCollapses
        (
            const indirectPrimitivePatch& pp,
            labelList& ppLayers
        ) const;

        //- Check for edges to collapse layer growth over
        void checkCollapses
        (
            const indirectPrimitivePatch& pp,
            const labelList& ppLevel,
            labelList& minEdgeLevel,
            boolList& collapsedPts
        );

        //- Convert baffle zones to patches
        void convertBaffleZones();

        //- Check for wrongly orientated faces in outer layer
        // and move opposite face
        void handleWrongOrientedFaces();

        //- Merge final layer cells that have been previously split
        void remergeOuterSplitCells();

        //- Merge final layer cells that have been previously split
        void markCellCuttingEdges
        (
            const label& celli,
            boolList& cutEdges
        );

        //- Reorient wrongly oriented face generated by split (needs fixing)
        void reorientateFaces();

        //- Adjust layer increments
        void incrementLayers
        (
            const indirectPrimitivePatch& pp,
            labelList& minPointLayers,
            labelList& maxPointLayers,
            labelList& ppLayers
        );

        //- Add layers iteratively for dual method
        void setRefinementDual();

        //- Add layers in single step for extrude method
        void setRefinementExtrude();

        //- Update layers for extrude method
        void updateExtrudeMesh
        (
            const labelList& layerPatchIDs,
            const labelList& ppLayers,
            const labelList& ppPtLayers,
            indirectPrimitivePatch& pp,
            labelList& ppLayersGlobal,
            labelList& ppPtLayersGlobal
        );

};

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
