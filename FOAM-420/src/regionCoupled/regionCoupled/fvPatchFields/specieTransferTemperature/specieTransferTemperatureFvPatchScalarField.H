/*---------------------------------------------------------------------------*\
|       o        |
|    o     o     |  FOAM (R) : Open-source CFD for Enterprise
|   o   O   o    |  Version : 4.2.0
|    o     o     |  ESI Ltd. <http://esi.com/>
|       o        |
\*---------------------------------------------------------------------------
License
    This file is part of FOAMcore.
    FOAMcore is based on OpenFOAM (R) <http://www.openfoam.org/>.

    FOAMcore is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    FOAMcore is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with FOAMcore.  If not, see <http://www.gnu.org/licenses/>.

Copyright
    (c) 2023 Esi Ltd.
    (c) 2019-2023 OpenFOAM Foundation

Class
    Foam::specieTransferTemperatureFvPatchScalarField

Description
    This is a temperature boundary condition for a specie-transferring wall.

    This condition must be used in conjunction with mass-fraction boundary
    conditions derived from specieTransferMassFractionFvPatchScalarField, and a
    specieTransferVelocity condition for the velocity.

    This condition sums the species' energy fluxes generated by the
    mass-fraction conditions, and uses this total to set the flux of energy
    into or out of the domain.

Usage
    \table
        Property | Description                | Req'd? | Default
        phi      | Name of the flux field     | no     | phi
        U        | Name of the velocity field | no     | U
    \endtable

    Example of the boundary condition specification:
    \verbatim
    <patchName>
    {
        type            specieTransferTemperature;
        value           $internalField;
    }
    \endverbatim

See also
    Foam::specieTransferMassFractionFvPatchScalarField
    Foam::specieTransferVelocityFvPatchScalarField

SourceFiles
    specieTransferTemperatureFvPatchScalarField.C

\*---------------------------------------------------------------------------*/

#ifndef specieTransferTemperatureFvPatchScalarField_H
#define specieTransferTemperatureFvPatchScalarField_H

#include "fields/fvPatchFields/derived/mixedEnergyCalculatedTemperature/mixedEnergyCalculatedTemperatureFvPatchScalarField.H"
#include "basicThermo/basicThermo.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
         Class specieTransferTemperatureFvPatchScalarField Declaration
\*---------------------------------------------------------------------------*/

class specieTransferTemperatureFvPatchScalarField
:
    public mixedEnergyCalculatedTemperatureFvPatchScalarField
{
    // Private Data

        //- Name of the flux field
        const word phiName_;

        //- Name of the velocity field
        const word UName_;

        //- Grad in temperature
        scalarField refTempGrad_;

        //- Temperature from HE
        scalarField refTemp_;

        //- Pointer to thermo
        mutable const basicThermo* thermoPtr_;

        //- Set thermo pointer
        void setThermos() const;

        //- Is this patch on the h/e field rather than temperature?
        virtual bool ishe() const
        {
            setThermos();
            return internalField().name() == thermoPtr_->he().name();
        }


public:

    //- Runtime type information
    TypeName("specieTransferTemperature");


    // Constructors

        //- Construct from patch and internal field
        specieTransferTemperatureFvPatchScalarField
        (
            const fvPatch& ptf,
            const DimensionedField<scalar, volMesh>& iF
        );

        //- Construct from patch, internal field and dictionary
        specieTransferTemperatureFvPatchScalarField
        (
            const fvPatch&,
            const DimensionedField<scalar, volMesh>&,
            const dictionary&,
            const bool readValue = true
        );

        //- Construct by mapping given fixedValueTypeFvPatchField
        //  onto a new patch
        specieTransferTemperatureFvPatchScalarField
        (
            const specieTransferTemperatureFvPatchScalarField&,
            const fvPatch&,
            const DimensionedField<scalar, volMesh>&,
            const fvPatchFieldMapper&
        );

        //- Copy constructor setting internal field reference
        specieTransferTemperatureFvPatchScalarField
        (
            const specieTransferTemperatureFvPatchScalarField&,
            const DimensionedField<scalar, volMesh>&
        );

        //- Construct and return a clone setting internal field reference
        virtual tmp<fvPatchScalarField> clone
        (
            const DimensionedField<scalar, volMesh>& iF
        ) const
        {
            return tmp<fvPatchScalarField>
            (
                new specieTransferTemperatureFvPatchScalarField
                (
                    *this,
                    iF
                )
            );
        }


    // Member Functions

        // Evaluation functions

            //- Return the flux of energy
            const tmp<scalarField> phiHep() const;

            //- Return gradient at boundary
            virtual tmp<scalarField> snGrad() const;

            //- Evaluate the patch field
            virtual void evaluate
            (
                const Pstream::commsTypes commsType =
                    Pstream::commsTypes::blocking
            );

            //- Update the coefficients associated with the patch field
            virtual void updateCoeffs();

            //- Return the matrix diagonal coefficients corresponding to the
            //  evaluation of the value of this patchField with given weights
            virtual tmp<scalarField> valueInternalCoeffs
            (
                const tmp<scalarField>& w
            ) const;

            //- Return the matrix source coefficients corresponding to the
            //  evaluation of the value of this patchField with given weights
            virtual tmp<scalarField> valueBoundaryCoeffs
            (
                const tmp<scalarField>& w
            ) const;

            //- Return the matrix diagonal coefficients corresponding to the
            //  evaluation of the gradient of this patchField
            virtual tmp<scalarField> gradientInternalCoeffs() const;

            //- Return the matrix source coefficients corresponding to the
            //  evaluation of the gradient of this patchField
            virtual tmp<scalarField> gradientBoundaryCoeffs() const;


        //- Write
        virtual void write(Ostream&) const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


#endif

// ************************************************************************* //
