surfaces1
{
    type            surfaces;
    functionObjectLibs ("libsampling.so");
    region          region0;
    fields ( U p );

    // interpolationScheme. choice of
    //      cell          : use cell-centre value only; constant over cells (default)
    //      cellPoint     : use cell-centre and vertex values
    //      cellPointFace : use cell-centre, vertex and face values.
    // 1] vertex values determined from neighbouring cell-centre values
    // 2] face values determined using the current face interpolation scheme
    //    for the field (linear, gamma, etc.)
    interpolationScheme cellPointFace;

    // Surface output format. Choice of
    //      null        : suppress output
    //      foamFile    : separate points, faces and values file
    //      dx          : DX scalar or vector format
    //      vtk         : VTK ascii format
    //      raw         : x y z value format for use with e.g. gnuplot 'splot'.
    surfaceFormat vtk;

    surfaces
    (
    /*
        interpolatedPlane
        {
            type            plane;    // always triangulated
            // make plane relative to the coordinateSystem (Cartesian)
            
            coordinateSystem
            {
                origin      (1 1 1);
            }
            basePoint       (0 0 0);
            normalVector    (0.1 1.1 0.5);
            interpolate     true;
        }

        movingWall_constant
        {
            type            patch;
            patchName       movingWall;
            // Optional: whether to leave as faces (=default) or triangulate
            // triangulate     false;
        }

        constantPlane
        {
            type            plane;    // always triangulated
            basePoint       (0.0501 0.0501 0.005);
            normalVector    (0.1 0.1 1);

            //- Optional: restrict to a particular zone
            // zone        zone1;
        }

        movingWall_interpolated
        {
            type            patch;
            patchName       movingWall;
            interpolate     true;
            // Optional: whether to leave as faces (=default) or triangulate
            // triangulate     false;
        }

        interpolatedIso
        {
            // Iso surface for interpolated values only
            type            isoSurface;    // always triangulated
            isoField        rho;
            isoValue        0.5;
            interpolate     true;

            //zone            ABC;          // Optional: zone only
            //exposedPatchName fixedWalls;  // Optional: zone only

            // regularise      false;    // Optional: do not simplify
        }
        constantIso
        {
            // Iso surface for constant values.
            // Triangles guaranteed not to cross cells.
            type            isoSurfaceCell;    // always triangulated
            isoField        rho;
            isoValue        0.5;
            interpolate     false;
            regularise      false;              // do not simplify
        }

        triangleCut
        {
            // Cutting plane using iso surface
            type            cuttingPlane;
            planeType       pointAndNormal;
            pointAndNormalDict
            {
                basePoint       (0.4 0 0.4);
                normalVector    (1 0.2 0.2);
            }
            interpolate     true;

            //zone            ABC;          // Optional: zone only
            //exposedPatchName fixedWalls;  // Optional: zone only

            // regularise      false;    // Optional: do not simplify
        }
        */
    );
}
